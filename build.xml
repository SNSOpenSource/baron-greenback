<?xml version="1.0" encoding="UTF-8"?>
<project name="baron-greenback" default="build">
    <property name="build.number" value="dev.build"/>
    <property name="build" value="${basedir}/build"/>
    <property name="artifacts" value="${build}/artifacts"/>
    <property name="reports" value="${artifacts}/reports"/>
    <property name="src" value="${basedir}/src"/>
    <property name="test" value="${basedir}/test"/>
    <property name="release.version" value="${build.number}"/>
    <property name="release.name" value="${ant.project.name}-${release.version}"/>
    <property name="release.jar" value="${release.name}.jar"/>
    <property name="release.pom" value="${release.name}.pom"/>
    <property name="release.src" value="${release.name}-sources.jar"/>
    <property name="release.jar.path" value="${artifacts}/${release.jar}"/>
    <property name="tests.jar" value="${release.name}-tests.jar"/>
    <property name="tests.src" value="${release.name}-test-sources.jar"/>
    <property name="tests.jar.path" value="${artifacts}/${tests.jar}"/>
    <property name="build.dependencies.dir" value="lib/build"/>
    <property name="runtime.dependencies.dir" value="lib/runtime"/>
    <property name="optional.dependencies.dir" value="lib/optional"/>

    <condition property="64bits">
        <os arch="amd64"/>
    </condition>

    <import file="${build}/macros.xml"/>
    <import file="${build}/shavenmaven.xml"/>

    <path id="all.dependancies">
        <fileset dir="${build.dependencies.dir}" includes="**/*.jar"/>
        <fileset dir="${runtime.dependencies.dir}" includes="*.jar"/>
        <fileset dir="${optional.dependencies.dir}" includes="*.jar"/>
    </path>

    <path id="all.jars">
        <path refid="all.dependancies"/>
        <path path="${release.jar.path}"/>
        <path path="${tests.jar.path}"/>
    </path>

    <target name="update" description="Updates library dependencies">
        <!--<install version="57"/>-->
        <parallel>
            <update dependencies="build/build.dependencies"
                    directory="${build.dependencies.dir}"/>
            <update dependencies="build/runtime.dependencies"
                    directory="${runtime.dependencies.dir}"/>
            <update dependencies="build/optional.dependencies"
                    directory="${optional.dependencies.dir}"/>
        </parallel>
    </target>

    <target name="clean" description="cleanup all">
        <delete dir="${artifacts}"/>
    </target>

    <target name="compile">
        <compile.and.jar src="${src}" jar="${release.jar.path}" classpathref="all.dependancies"
                         version="${release.version}" main.class="com.googlecode.barongreenback.WebApplication"/>
        <compile.and.jar src="${test}" jar="${tests.jar.path}" classpathref="all.jars" version="${release.version}"/>
    </target>

    <target name="test">
        <test jar="${tests.jar.path}" classpathref="all.jars" reports="${reports}"/>
    </target>

    <target name="testjs32" unless="64bits">
        <property name="phantomlinux" value="${build.dependencies.dir}/phantomjs-linux-x86_32"/>
    </target>

    <target name="testjs64" if="64bits">
        <property name="phantomlinux" value="${build.dependencies.dir}/phantomjs-linux-x86_64"/>
    </target>

    <target name="testjs" depends="testjs32, testjs64">
        <taskdef name="jstest" classname="com.philmander.jstest.ant.JsTestRunnerTask"
                 classpath="${build.dependencies.dir}/ant-jstestrunner-spmiller-deps-0.2.jar"/>
        <property name="phantomosx" value="${build.dependencies.dir}/phantomjs-osx"/>
        <chmod file="${phantomlinux}" perm="u+x"/>
        <chmod file="${phantomosx}" perm="u+x"/>
        <jstest dir="${basedir}/test" includes="**/*.html"
                phantomlinux="${phantomlinux}"
                phantomWin="${build.dependencies.dir}/phantomjs-windows.exe"
                phantommac="${phantomosx}">
            <report type="plain" destFile="${reports}/qunit-results.txt"/>
        </jstest>
    </target>

    <target name="package">
        <mkdir dir="${artifacts}"/>

        <zip destfile="${artifacts}/${release.src}" basedir="src"/>

        <zip destfile="${artifacts}/${tests.src}" basedir="test"/>

        <exec executable="hg" output="${artifacts}/hg.properties">
            <arg line="log -l 1"/>
        </exec>
        <property file="${artifacts}/hg.properties" prefix="hg"/>

        <propertyfile file="${artifacts}/release.properties">
            <entry key="release.version" value="${release.version}"/>
            <entry key="project.name" value="${ant.project.name}"/>
            <entry key="release.name" value="${release.name}"/>
            <entry key="release.path" value="com/googlecode/${ant.project.name}/${ant.project.name}/${release.version}/"/>
            <entry key="release.files" value="${release.jar},${release.pom},${release.src},${tests.jar},${tests.src}"/>
            <entry key="${release.jar}.description" value="${hg.summary} build:${build.number} changeset:${hg.changeset} user:${hg.user}"/>
            <entry key="${release.jar}.labels" value="Jar"/>
            <entry key="${release.pom}.description" value="Maven POM file build:${build.number}"/>
            <entry key="${release.pom}.labels" value="POM"/>
            <entry key="${release.src}.description" value="Source file build:${build.number}"/>
            <entry key="${release.src}.labels" value="Source"/>
            <entry key="${tests.jar}.description" value="Tests jar build:${build.number}"/>
            <entry key="${tests.jar}.labels" value="Tests"/>

            <entry key="${tests.src}.description" value="Test sources jar build:${build.number}"/>
            <entry key="${tests.src}.labels" value="Test Sources"/>
        </propertyfile>

        <generate.pom artifact.uri="mvn:com.googlecode.${ant.project.name}:${ant.project.name}:jar:${release.version}"
                             dependencies="build/runtime.dependencies"
                             directory="${artifacts}"/>

    </target>

    <target name="build" description="build all">
        <parallel>
            <antcall target="update"/>
            <antcall target="clean"/>
        </parallel>
        <antcall target="compile"/>
        <parallel>
            <antcall target="test"/>
            <antcall target="testjs"/>
            <antcall target="package"/>
        </parallel>
    </target>

</project>
